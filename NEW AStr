"""MyGraph = {
    'A' : {'B':6,'F':3},
    'B' : {'A':6,'C':3,'D':2},
    'C' : {'B':3,'D':1,'E':5},
    'D' : {'B':2,'C':1,'E':8},
    'E' : {'C':5,'D':8,'I':5,'J':5},
    'F' : {'A':3,'G':1,'H':7},
    'G' : {'F':1,'I':3},
    'H' : {'F':7,'I':2},
    'I' : {'E':5,'G':3,'H':2,'J':3},
    'J' : {'E':5,'I':3}
}
HeuristicValues = {
    'A':10,
    'B':8,
    'C':5,
    'D':7,
    'E':3,
    'F':6,
    'G':5,
    'H':3,
    'I':1,
    'J':0
}
StartNode='A'
GoalNode='J'
def myastar():
    path=[StartNode]
    cost=0
    Queue,visited=[cost,path],[]
    while Queue:
        hmin=0
        i=0
        while i<len(Queue):
            if Queue[hmin]+ HeuristicValues[Queue[hmin+1][len(Queue[hmin+1])-1]] > Queue[i]+HeuristicValues[Queue[i+1][len(Queue[i+1])-1]]:
                hmin=i
            i=i+2
        Cost=Queue.pop(hmin)
        Path=Queue.pop(hmin)
        Last=Path[len(Path)-1]
        if Last not in visited:
            visited.append(Last)
            if Last==GoalNode:
                Path.append(" Cost is: "+str(Cost))
                return Path
            for i in MyGraph[Last].keys():
                newPath=list(Path)
                newPath.append(i)
                Queue.append(Cost+MyGraph[Last][i])
                Queue.append(newPath)
    return 0
print(myastar())
"""
